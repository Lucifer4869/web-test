frontend/ ใช้ vue 3 Composition
└── dist/
└── .env/
└── src/
    ├── assets/
    ├── components/
    ├── router/
    ├── service/
    └── views/
        └── pages/
            └── uikit
            │   └── Crud01.vue
            │   └── Listdegree.vue
            │   └── ListDoc.vue
            │   └── Logs.vue
            │   └── Seat.vue
            └── Dashboard.vue

-- หน้า Crud01.vue --
<script setup>
import { FilterMatchMode } from '@primevue/core/api';
import { useToast } from 'primevue/usetoast';
import { onMounted, ref, computed } from 'vue';
import axios from 'axios';
import { Icon } from '@iconify/vue';

const API_BASE = import.meta.env.VITE_API_BASE;

const toast = useToast();
const dt = ref();
const persons = ref();

// Dialog
const productDialog = ref(false);
const UploadDialog = ref(false);
const ExportDialog = ref(false);
const deleteProductDialog = ref(false);
const deletepersonsDialog = ref(false);

const product = ref({});
const selectedpersons = ref();
const filters = ref({
    global: { value: null, matchMode: FilterMatchMode.CONTAINS }
});
const submitted = ref(false);
const loading = ref(false);
const filteredVerified = ref(null);

// รีเซ็ตข้อมูล
const confirmResetDialog1 = ref(false);
const confirmResetDialog2 = ref(false);
const resetKeyword = ref('');

// รีเซ็ตข้อมูล
const confirmResetdatabase = () => {
    confirmResetDialog1.value = true;
};

const handleResetStep1 = () => {
    confirmResetDialog1.value = false;
    confirmResetDialog2.value = true;
};

const handleResetStep2 = async () => {
    if (resetKeyword.value.toUpperCase() !== 'RESET') {
        toast.add({
            severity: 'error',
            summary: 'ยืนยันไม่สำเร็จ',
            detail: 'กรุณาพิมพ์คำว่า "RESET" ให้ถูกต้อง',
            life: 3000
        });
        resetKeyword.value = '';
        return;
    }
    try {
        await axios.post(`${API_BASE}/api/reset/`);
        await fetchPersons();
        toast.add({
            severity: 'success',
            summary: 'รีเซ็ตสำเร็จ',
            detail: 'ลบข้อมูลทั้งหมดเรียบร้อย',
            life: 5000
        });
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'รีเซ็ตล้มเหลว',
            detail: error.response?.data?.error || 'เกิดข้อผิดพลาด',
            life: 5000
        });
    } finally {
        confirmResetDialog2.value = false;
        resetKeyword.value = '';
    }
};

// โหลดข้อมูล
const exportPDF = async () => {
    try {
        const response = await axios.get(`${API_BASE}/api/export-pdf/`, {
            responseType: 'blob',
            timeout: 30000
        });

        // ตรวจสอบขนาดไฟล์
        if (response.data.size < 1024) {
            throw new Error('ไฟล์ PDF ว่างเปล่า');
        }

        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', 'รายชื่อบัณฑิต.pdf');
        document.body.appendChild(link);
        link.click();
        link.remove();
    } catch (error) {
        console.error('PDF Export Error:', error);
        alert('ส่งออก PDF ไม่สำเร็จ: ' + error.message);
    }
};

// Export ข้อมูล
const exportData = async (format) => {
    try {
        const response = await axios.get(`${API_BASE}/api/export/${format}/`, { responseType: 'blob' });

        // สร้างลิงก์ดาวน์โหลด
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `persons${format}.${format}`);
        document.body.appendChild(link);
        link.click();
        link.remove();
    } catch (error) {
        console.error('Export error:', error);
    }
};

// อัพโหลด
const file = ref(null);
const progress = ref(0);
const processing = ref(false);
const processingInterval = ref(null);
const uploadInProgress = ref(false);

const handleFileSelect = (event) => {
    file.value = event.target.files[0];
};

const handleFileUpload = async () => {
    if (!file.value) {
        alert('กรุณาเลือกไฟล์ก่อน');
        return;
    }

    uploadInProgress.value = true;
    progress.value = 0;
    processing.value = false;

    const formData = new FormData();
    formData.append('file', file.value);

    try {
        await axios.post(`${API_BASE}/api/import/`, formData, {
            headers: { 'Content-Type': 'multipart/form-data' },
            onUploadProgress: (progressEvent) => {
                const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                progress.value = Math.min(percent * 0.8, 80); // จำกัดไม่ให้เกิน 80%
            }
        });

        // เริ่มการจำลองการประมวลผลที่ server
        processing.value = true;
        processingInterval.value = setInterval(() => {
            if (progress.value < 99) {
                progress.value += 1;
            } else {
                clearInterval(processingInterval.value);
            }
        }, 50);

        await fetchPersons(); // รอให้ server ทำงานเสร็จ

        clearInterval(processingInterval.value);
        progress.value = 100;

        toast.add({
            severity: 'success',
            summary: 'อัปโหลดสำเร็จ',
            detail: 'นำเข้าข้อมูลเรียบร้อย',
            life: 5000
        });
    } catch (error) {
        clearInterval(processingInterval.value);
        toast.add({
            severity: 'error',
            summary: 'อัปโหลดล้มเหลว',
            detail: error.response?.data?.error || 'เกิดข้อผิดพลาด',
            life: 5000
        });
    } finally {
        uploadInProgress.value = false;
        processing.value = false;
    }
};

// ฟังก์ชันนี้จะถูกเรียกเมื่อกดปุ่ม "ปิด"
const closeDialog = () => {
    file.value = null;
    progress.value = 0;
    uploadInProgress.value = false;
    processing.value = false;
    UploadDialog.value = false;
};

// กรองคนรายงานตัว
const applyVerifiedFilter = (value) => {
    filteredVerified.value = value;
};

const filteredPersons = computed(() => {
    if (filteredVerified.value === null) {
        return persons.value; // แสดงทั้งหมด
    }
    return persons.value.filter((person) => person.verified === filteredVerified.value);
});

// เพิ่ม 0 ให้เลขครบ 4 หลัก
function formatId(id) {
    return id.toString().padStart(4, '0');
}

async function fetchPersons() {
    loading.value = true; // เริ่มต้น loading
    try {
        const response = await axios.get(`${API_BASE}/api/person/`);
        persons.value = response.data.map((person) => ({
            ...person,
            formatted_id: formatId(person.id) // ใช้ฟังก์ชันจัดรูปแบบ ID
        }));
    } catch (error) {
        console.error('Error fetching persons:', error);
    } finally {
        loading.value = false; // หยุด loading ไม่ว่าจะสำเร็จหรือล้มเหลว
    }
}
onMounted(fetchPersons);

// เพิ่ม Axios สำหรับ CRUD Operations
const saveProduct = async () => {
    submitted.value = true;
    if (product?.value.name?.trim()) {
        try {
            if (product.value.id) {
                // อัพเดตข้อมูล
                await axios.put(`${API_BASE}/api/person/${product.value.id}/`, product.value);
                toast.add({ severity: 'success', summary: 'บันทึกสำเร็จ', detail: 'อัพเดตข้อมูลเรียบร้อย', life: 3000 });
            } else {
                // สร้างข้อมูลใหม่
                await axios.post(`${API_BASE}/api/person/`, product.value);
                toast.add({ severity: 'success', summary: 'บันทึกสำเร็จ', detail: 'สร้างข้อมูลเรียบร้อย', life: 3000 });
            }
            await fetchPersons(); // ดึงข้อมูลใหม่หลังบันทึก
            productDialog.value = false;
        } catch (error) {
            console.error('Error saving data:', error);
            toast.add({ severity: 'error', summary: 'เกิดข้อผิดพลาด', detail: 'บันทึกข้อมูลไม่สำเร็จ', life: 3000 });
        }
    }
};

const deleteProduct = async () => {
    try {
        await axios.delete(`${API_BASE}/api/person/${product.value.id}/`);
        persons.value = persons.value.filter((val) => val.id !== product.value.id);
        deleteProductDialog.value = false;
        toast.add({ severity: 'success', summary: 'สำเร็จ', detail: 'ลบข้อมูลเรียบร้อย', life: 3000 });
    } catch (error) {
        console.error('Error deleting data:', error);
        toast.add({ severity: 'error', summary: 'เกิดข้อผิดพลาด', detail: 'ลบข้อมูลไม่สำเร็จ', life: 3000 });
    }
};

// Crud01.vue
async function deleteSelectedpersons() {
    try {
        const ids = selectedpersons.value.map((person) => person.id);
        await axios.delete(`${API_BASE}/api/person/delete/`, {
            data: { ids },
            headers: {
                'Content-Type': 'application/json'
            }
        });

        persons.value = persons.value.filter((val) => !ids.includes(val.id));
        selectedpersons.value = null;
        deletepersonsDialog.value = false;

        toast.add({ severity: 'success', summary: 'สำเร็จ', detail: 'ลบรายการเรียบร้อย', life: 3000 });
    } catch (error) {
        console.error('Error deleting data:', error);
        toast.add({
            severity: 'error',
            summary: 'เกิดข้อผิดพลาด',
            detail: error.response?.data?.error || 'ลบรายการไม่สำเร็จ',
            life: 5000
        });
    }
}

function confirmDeleteSelected() {
    deletepersonsDialog.value = true;
}

function confirmDeleteProduct(prod) {
    product.value = { ...prod };
    deleteProductDialog.value = true;
}

function confirmUpload() {
    UploadDialog.value = true;
}

function choseExport() {
    ExportDialog.value = true;
}

function openNew() {
    product.value = {};
    submitted.value = false;
    productDialog.value = true;
}

function hideDialog() {
    productDialog.value = false;
    submitted.value = false;
}

function editProduct(prod) {
    product.value = { ...prod };
    productDialog.value = true;
}

const items = ref([
    {
        label: 'reset',
        icon: 'grommet-icons:power-reset',
        color: 'text-green-500',
        command: () => {
            applyVerifiedFilter(null);
        }
    },
    {
        label: '?',
        icon: 'rivet-icons:exclamation-mark-circle-solid',
        color: 'text-yellow-300',
        command: () => {
            applyVerifiedFilter(2);
        }
    },
    {
        label: 'ยังไม่รายงานตัว',
        icon: 'rivet-icons:close-circle-solid',
        color: 'text-red-500',
        command: () => {
            applyVerifiedFilter(0);
        }
    },
    {
        label: 'รายงานตัวแล้ว',
        icon: 'rivet-icons:check-circle-solid',
        color: 'text-green-500',
        command: () => {
            applyVerifiedFilter(1);
        }
    }
]);
</script>

<template>
    <div>
        <div class="card">
            <Toolbar class="mb-6">
                <template #start>
                    <Button v-tooltip.top="'เพิ่มรายชื่อ'" severity="secondary" class="mr-2" @click="openNew" rounded raised>
                        <Icon icon="material-symbols:add-2-rounded" />
                    </Button>
                    <Button v-tooltip.top="'ลบรายการที่เลือก'" severity="secondary" class="mr-2" @click="confirmDeleteSelected" :disabled="!selectedpersons || !selectedpersons.length" rounded raised>
                        <Icon icon="mdi:trash-can-outline" />
                    </Button>
                    <Button v-tooltip.top="'รีเซ็ตข้อมูล'" severity="secondary" class="mr-2" @click="confirmResetdatabase" rounded raised>
                        <Icon icon="lucide:database-backup" />
                    </Button>
                </template>

                <template #end>
                    <Button :disabled="uploadInProgress" severity="secondary" class="mr-2" @click="confirmUpload" rounded raised> <Icon icon="lets-icons:import" />อัปโหลดไฟล์</Button>
                    <Button severity="secondary" class="mr-2" @click="choseExport" rounded raised> <Icon icon="lets-icons:export" />โหลดไฟล์ </Button>
                </template>
            </Toolbar>

            <DataTable
                ref="dt"
                v-model:selection="selectedpersons"
                :value="filteredPersons"
                dataKey="id"
                :paginator="true"
                :rows="25"
                :filters="filters"
                paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
                :rowsPerPageOptions="[25, 50]"
                currentPageReportTemplate="จาก   {first} ถึง {last} ของทั้งหมด {totalRecords} คน"
                :sortField="'formatted_id'"
                :sortOrder="1"
                :loading="loading"
            >
                <template #header>
                    <div class="flex flex-wrap items-center justify-between gap-2">
                        <div>
                            <h4 class="m-0">จัดการรายชื่อบัญฑิต</h4>
                        </div>
                        <div class="flex items-center gap-2">
                            <SpeedDial :model="items" direction="left" :transitionDelay="40" pt:menuitem="m">
                                <template #button="{ toggleCallback }">
                                    <Button outlined @click="toggleCallback" rounded>
                                        <Icon icon="hugeicons:filter"></Icon>
                                    </Button>
                                </template>
                                <template #item="{ item, toggleCallback }">
                                    <Button class="justify-between gap-2 cursor-pointer text-nowrap" @click="toggleCallback" outlined rounded>
                                        <Icon :icon="item.icon" :class="item.color" />
                                    </Button>
                                </template>
                            </SpeedDial>
                            <IconField>
                                <InputIcon>
                                    <i class="pi pi-search" />
                                </InputIcon>
                                <InputText v-model="filters['global'].value" placeholder="ค้นหาข้อมูลบัญฑิต" />
                            </IconField>
                            <Toast />
                        </div>
                    </div>
                </template>

                <Column selectionMode="multiple" style="width: 3rem" :exportable="false"></Column>
                <Column field="formatted_id" header="ลำดับที่" sortable style="min-width: 6rem"></Column>
                <Column field="nisit" header="รหัสนิสิต" sortable style="min-width: 10rem"></Column>
                <!-- <Column header="Image">
                    <template #body="slotProps">
                        <img :src="`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`" :alt="slotProps.data.image" class="rounded" style="width: 64px" />
                    </template>
                </Column> -->
                <Column field="name" header="ชื่อ-นามสกุล" sortable style="min-width: 12rem"></Column>
                <Column field="degree" header="ชื่อปริญญา" sortable style="min-width: 10rem"></Column>
                <!-- <Column field="rating" header="Reviews" sortable style="min-width: 12rem">
                    <template #body="slotProps">
                        <Rating :modelValue="slotProps.data.rating" :readonly="true" />
                    </template>
                </Column> -->
                <Column field="seat" header="เลขที่นั่ง" sortable style="min-width: 8rem"></Column>
                <Column field="verified" header="รายงานตัว" dataType="boolean" bodyClass="text-center" style="min-width: 8rem">
                    <template #body="{ data }">
                        <Icon
                            class="icon"
                            :icon="data.verified === 1 ? 'rivet-icons:check-circle-solid' : data.verified === 0 ? 'rivet-icons:close-circle-solid' : 'rivet-icons:exclamation-mark-circle-solid'"
                            :class="{
                                'text-green-500': data.verified === 1,
                                'text-red-500': data.verified === 0,
                                'text-yellow-300': data.verified === 2
                            }"
                        />
                    </template>
                    <template #filter="{ filterModel }">
                        <label for="verified-filter" class="font-bold"> Verified </label>
                        <Checkbox v-model="filterModel.value" :indeterminate="filterModel.value === null" binary inputId="verified-filter" />
                    </template>
                </Column>
                <Column :exportable="false" style="min-width: 1rem">
                    <template #body="slotProps">
                        <Button icon="pi pi-pencil" outlined rounded class="mr-2" @click="editProduct(slotProps.data)" />
                        <Button icon="pi pi-trash" outlined rounded severity="danger" @click="confirmDeleteProduct(slotProps.data)" />
                    </template>
                </Column>
            </DataTable>
        </div>

        <Dialog v-model:visible="productDialog" :style="{ width: '450px' }" header="รายละเอียดบัญฑิต" :modal="true">
            <div class="flex flex-col gap-6">
                <div>
                    <label for="formatted_id" class="block mb-3 font-bold">ลำดับ</label>
                    <InputText id="formatted_id" v-model.trim="product.formatted_id" autofocus :invalid="submitted && !product.formatted_id" fluid disabled="true" />
                </div>
                <div>
                    <label for="nisit" class="block mb-3 font-bold">รหัสนิสิต</label>
                    <InputText id="nisit" v-model.trim="product.nisit" autofocus :invalid="submitted && !product.nisit" fluid disabled="true" />
                </div>
                <div>
                    <label for="name" class="block mb-3 font-bold">ชื่อ-นามสกุล</label>
                    <InputText id="name" v-model.trim="product.name" required="true" autofocus :invalid="submitted && !product.name" fluid />
                    <small v-if="submitted && !product.name" class="text-red-500">จำเป็นต้องใส่</small>
                </div>
                <div>
                    <label for="degree" class="block mb-3 font-bold">ชื่อปริญญา</label>
                    <InputText id="degree" v-model.trim="product.degree" required="true" autofocus :invalid="submitted && !product.degree" fluid />
                    <small v-if="submitted && !product.degree" class="text-red-500">จำเป็นต้องใส่</small>
                </div>
                <div>
                    <label for="seat" class="block mb-3 font-bold">ที่นั่ง</label>
                    <InputText id="seat" v-model.trim="product.seat" autofocus :invalid="submitted && !product.degree" fluid disabled="true" />
                </div>
                <div>
                    <span class="block mb-4 font-bold">สถานะรายงานตัว</span>
                    <div class="grid grid-cols-12 gap-4">
                        <div class="flex items-center col-span-4 gap-2">
                            <RadioButton id="verified1" v-model="product.verified" name="verified" :value="1" />
                            <label for="verified1">
                                <Icon icon="rivet-icons:check-circle-solid" class="text-green-500" />
                            </label>
                        </div>
                        <div class="flex items-center col-span-4 gap-2">
                            <RadioButton id="verified0" v-model="product.verified" name="verified" :value="0" />
                            <label for="verified0">
                                <Icon icon="rivet-icons:close-circle-solid" class="text-red-500" />
                            </label>
                        </div>
                        <div class="flex items-center col-span-4 gap-2">
                            <RadioButton id="verified2" v-model="product.verified" name="verified" :value="2" />
                            <label for="verified2">
                                <Icon icon="rivet-icons:exclamation-mark-circle-solid" class="text-yellow-300" />
                            </label>
                        </div>
                    </div>
                </div>
                <div>
                    <label for="rfid" class="block mb-3 font-bold">รหัส RFID</label>
                    <InputText id="rfid" v-model.trim="product.rfid" required="true" autofocus :invalid="submitted && !product.rfid" fluid />
                </div>
                <!--

                <div class="grid grid-cols-12 gap-4">
                    <div class="col-span-6">
                        <label for="price" class="block mb-3 font-bold">Price</label>
                        <InputNumber id="price" v-model="product.price" mode="currency" currency="USD" locale="en-US" fluid />
                    </div>
                    <div class="col-span-6">
                        <label for="quantity" class="block mb-3 font-bold">Quantity</label>
                        <InputNumber id="quantity" v-model="product.quantity" integeronly fluid />
                    </div>
                </div> -->
            </div>

            <template #footer>
                <Button label="Cancel" icon="pi pi-times" text @click="hideDialog" severity="danger" />
                <Button label="Save" icon="pi pi-check" text @click="saveProduct" />
            </template>
        </Dialog>

        <Dialog v-model:visible="UploadDialog" header="อัปโหลดไฟล์" :modal="true" :closable="false">
            <div class="flex flex-col items-center gap-4">
                <div v-if="file" class="py-2">
                    <div class="flex items-center gap-3">
                        <Icon icon="clarity:file-line" class="text-primary-700" style="width: 36px; height: 36px" />
                        <Tag severity="success" class="px-4 py-2 rounded-xl max-w-[400px] overflow-hidden text-ellipsis whitespace-nowrap">
                            <span class="text-3xl font-bold break-all">{{ file.name }}</span>
                        </Tag>
                    </div>
                </div>

                <!-- ปุ่มเลือกไฟล์ -->
                <div v-if="!uploadInProgress && !processing && !progress">
                    <input type="file" accept=".xlsx,.csv" @change="handleFileSelect" ref="fileInput" hidden />
                    <Button @click="$refs.fileInput.click()">
                        <Icon icon="lets-icons:import" />
                        {{ file ? 'เปลี่ยนไฟล์' : 'เลือกไฟล์' }}
                    </Button>
                </div>

                <!-- ข้อความเมื่อเสร็จ -->
                <p v-if="progress >= 100" class="text-sm text-center text-green-600">✔️ อัปโหลดและประมวลผลเสร็จสมบูรณ์</p>

                <!-- Progress Bar -->
                <template v-if="uploadInProgress">
                    <ProgressBar v-if="uploadInProgress" :value="progress" :showValue="false" class="w-full" style="height: 4px" />
                    <p v-if="uploadInProgress" class="mt-2 text-sm text-center text-black">
                        {{ progress < 80 ? 'กำลังอัปโหลดไฟล์...' : 'กำลังประมวลผลข้อมูล...' }}
                    </p>
                </template>
            </div>

            <template #footer>
                <!-- ปุ่มก่อนอัปโหลดเสร็จ -->
                <template v-if="progress < 100">
                    <Button label="ยกเลิก" icon="pi pi-times" @click="closeDialog" severity="danger" />
                    <Button label="ยืนยัน" icon="pi pi-check" @click="handleFileUpload" :loading="uploadInProgress" :disabled="!file || uploadInProgress" />
                </template>

                <!-- ปุ่มหลังอัปโหลดเสร็จ -->
                <template v-else>
                    <Button label="ปิด" @click="closeDialog" severity="success" />
                </template>
            </template>
        </Dialog>

        <!-- Toast Notification -->
        <Toast position="top-center" group="crud">
            <template #message="slotProps">
                <div class="flex items-center gap-3">
                    <Icon :icon="slotProps.message.severity === 'success' ? 'line-md:confirm-circle-twotone' : 'line-md:close-circle-twotone'" class="text-2xl" />
                    <div>
                        <p class="font-bold">{{ slotProps.message.summary }}</p>
                        <p class="text-sm">{{ slotProps.message.detail }}</p>
                    </div>
                </div>
            </template>
        </Toast>

        <Dialog v-model:visible="ExportDialog" header="โหลดไฟล์" :modal="true">
            <div class="flex items-center justify-center">
                <Button severity="secondary" class="mr-2" @click="exportData('xlsx')" rounded raised>
                    <Icon icon="vscode-icons:file-type-excel"></Icon>
                    <span>โหลดไฟล์เป็น Excel</span>
                </Button>
                <Button severity="secondary" class="mr-2" @click="exportData('csv')" rounded raised>
                    <Icon icon="catppuccin:csv"></Icon>
                    <span>โหลดไฟล์เป็น CSV</span>
                </Button>
                <Button severity="secondary" class="mr-2" @click="exportPDF" rounded raised>
                    <Icon icon="vscode-icons:file-type-pdf2" />
                    <span>โหลดไฟล์เป็น PDF</span>
                </Button>
            </div>
        </Dialog>

        <!-- Dialog ยืนยันขั้นที่ 1 -->
        <Dialog v-model:visible="confirmResetDialog1" header="ยืนยันการรีเซ็ต" :modal="true" :style="{ width: '500px' }">
            <div class="flex items-center gap-4 p-4">
                <Icon icon="bi:exclamation-triangle-fill" class="text-yellow-300" />
                <div>
                    <h3 class="mb-2 text-lg font-bold">คุณแน่ใจที่จะรีเซ็ตฐานข้อมูลทั้งหมด?</h3>
                    <p class="text-black">การกระทำนี้จะลบข้อมูลทุกรายการและไม่สามารถกู้คืนได้</p>
                </div>
            </div>
            <template #footer>
                <Button label="ยกเลิก" icon="pi pi-times" @click="confirmResetDialog1 = false" severity="secondary" text />
                <Button label="ดำเนินการต่อ" icon="pi pi-arrow-right" @click="handleResetStep1" severity="danger" />
            </template>
        </Dialog>

        <!-- Dialog ยืนยันขั้นที่ 2 -->
        <Dialog v-model:visible="confirmResetDialog2" header="ยืนยันขั้นสุดท้าย" :modal="true" :style="{ width: '500px' }">
            <div class="flex flex-col gap-4 p-4">
                <div class="flex items-center gap-4">
                    <Icon icon="teenyicons:shield-solid" class="text-3xl text-red-500" />
                    <h3 class="text-lg font-bold">กรุณาพิมพ์คำว่า "RESET"</h3>
                </div>

                <InputText v-model="resetKeyword" placeholder="พิมพ์คำว่า RESET ที่นี่" class="w-full" autocomplete="off" @keyup.enter="handleResetStep2" />
            </div>
            <template #footer>
                <Button label="ยกเลิก" icon="pi pi-times" @click="confirmResetDialog2 = false" severity="secondary" text />
                <Button label="ยืนยันรีเซ็ต" icon="pi pi-check" @click="handleResetStep2" :disabled="resetKeyword.toUpperCase() !== 'RESET'" severity="danger" />
            </template>
        </Dialog>

        <Dialog v-model:visible="deleteProductDialog" header="ยืนยันการลบ" :modal="true">
            <div class="flex items-center gap-4">
                <i class="pi pi-exclamation-triangle !text-3xl" />
                <span v-if="product"
                    >คุณแน่ใจหรือไม่ที่จะลบลำดับที่ <b>{{ product.formatted_id }}</b> <b>{{ product.name }}</b>
                    ?
                </span>
            </div>
            <template #footer>
                <Button label="ยกเลิก" icon="pi pi-times" text @click="deleteProductDialog = false" severity="danger" />
                <Button label="ยืนยัน" icon="pi pi-check" text @click="deleteProduct" />
            </template>
        </Dialog>

        <Dialog v-model:visible="deletepersonsDialog" header="การยืนยัน" :modal="true">
            <div class="flex items-center gap-4">
                <i class="pi pi-exclamation-triangle !text-3xl" />
                <span v-if="product">แน่ใจว่าจะลบที่เลือกไว้ ?</span>
            </div>
            <template #footer>
                <Button label="No" icon="pi pi-times" text @click="deletepersonsDialog = false" severity="danger" />
                <Button label="Yes" icon="pi pi-check" text @click="deleteSelectedpersons" />
            </template>
        </Dialog>
    </div>
</template>

<style scoped>
.iconify {
    width: 18px;
    height: 18px;
}
</style>

-- หน้า Listdegree.vue --
<script setup>
import { ref, computed, onMounted } from 'vue';
import axios from 'axios';
import { FilterMatchMode } from '@primevue/core/api';
import { useToast } from 'primevue/usetoast';

const API_BASE = import.meta.env.VITE_API_BASE;

const toast = useToast();

const filters = ref({
    percentage: { value: [0, 100], matchMode: FilterMatchMode.BETWEEN }
});

const persons = ref([]);
const loading = ref(false);

// เรียกข้อมูลจาก API
async function fetchPersons() {
    loading.value = true;
    try {
        const response = await axios.get(`${API_BASE}/api/person/`);
        persons.value = response.data;
    } catch (error) {
        console.error('Error:', error);
    } finally {
        loading.value = false;
    }
}

const ExportPDFResult = async () => {
    try {
        const response = await axios.get(`${API_BASE}/api/export-pdf-result/`, {
            responseType: 'blob',
            timeout: 30000
        });

        // ตรวจสอบขนาดไฟล์
        if (response.data.size < 1024) {
            throw new Error('ไฟล์ PDF ว่างเปล่า');
        }

        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', 'รายชื่อสรุปบัณฑิต.pdf');
        document.body.appendChild(link);
        link.click();
        link.remove();
    } catch (error) {
        console.error('PDF Export Error:', error);
        toast.add({ severity: 'error', summary: 'เกิดข้อผิดพลาด', detail: 'โหลดไฟล์สรุป pdf ไม่สำเร็จ', life: 3000 });
    }
};

// ฟังก์ชันช่วยจัดกลุ่มประเภทปริญญา
function getDegreeType(degreeName) {
    if (degreeName.includes('ดุษฎีบัณฑิต')) return 'ดุษฎีบัณฑิต';
    if (degreeName.includes('มหาบัณฑิต')) return 'มหาบัณฑิต';
    return 'บัณฑิต';
}

// สรุปข้อมูลตามชื่อปริญญา และเรียงลำดับประเภท
const summaryByDegree = computed(() => {
    const summary = {};

    persons.value.forEach((person) => {
        const degree = person.degree;
        if (!summary[degree]) {
            summary[degree] = { degree, total: 0, reported: 0, absent: 0 };
        }
        summary[degree].total += 1;
        if (person.verified === 1) {
            summary[degree].reported += 1;
        }
    });

    Object.values(summary).forEach((entry) => {
        entry.absent = entry.total - entry.reported;
        entry.percentage = entry.total > 0 ? +((entry.reported / entry.total) * 100).toFixed(2) : 0;
    });

    // ลำดับประเภทปริญญา
    const degreeOrder = ['บัณฑิต', 'ดุษฎีบัณฑิต', 'มหาบัณฑิต'];

    return Object.values(summary).sort((a, b) => {
        return degreeOrder.indexOf(getDegreeType(a.degree)) - degreeOrder.indexOf(getDegreeType(b.degree));
    });
});

// รวมสรุปทั้งหมด
const totalSummary = computed(() => {
    const total = { degree: 'รวมทั้งหมด', total: 0, reported: 0, absent: 0, percentage: '0.00' };

    summaryByDegree.value.forEach((item) => {
        total.total += item.total;
        total.reported += item.reported;
        total.absent += item.absent;
    });

    total.percentage = total.total > 0 ? ((total.reported / total.total) * 100).toFixed(2) : '0.00';

    return total;
});

onMounted(() => {
    fetchPersons();
});
</script>

<template>
    <div class="p-6 space-y-6">
        <div class="card rounded-3xl">
            <h1 class="text-2xl font-bold text-center">รายงานสถานะบัณฑิตตามชื่อปริญญา</h1>
        </div>

        <!-- Summary Grid -->
        <div class="grid grid-cols-2 gap-4 md:grid-cols-4">
            <div class="flex items-center justify-between px-4 py-2 border-b-8 border-blue-500 rounded-3xl card">
                <div>
                    <div class="text-lg font-semibold">บัณฑิตทั้งหมด</div>
                    <div class="text-5xl font-bold">{{ totalSummary.total }}</div>
                </div>
                <Icon icon="nimbus:user-group" class="text-blue-500" style="width: 48px; height: 48px" />
            </div>

            <div class="flex items-center justify-between border-b-8 border-green-500 shadow pe-4 rounded-3xl card">
                <div>
                    <div class="text-lg font-semibold">รายงานตัวแล้ว</div>
                    <div class="text-5xl font-bold">{{ totalSummary.reported }}</div>
                </div>
                <Icon icon="rivet-icons:check-circle" class="text-green-500" style="width: 36px; height: 36px" />
            </div>

            <div class="flex items-center justify-between p-4 border-b-8 border-red-500 shadow rounded-3xl card">
                <div>
                    <div class="text-lg font-semibold">ขาด</div>
                    <div class="text-5xl font-bold">{{ totalSummary.absent }}</div>
                </div>
                <Icon icon="rivet-icons:close-circle" class="text-red-500" style="width: 36px; height: 36px" />
            </div>

            <div class="flex items-center justify-between p-4 border-b-8 border-yellow-500 shadow rounded-3xl card">
                <div>
                    <div class="text-lg font-semibold">เปอร์เซ็นต์</div>
                    <div class="text-5xl font-bold">{{ totalSummary.percentage }}%</div>
                </div>
                <Icon icon="mage:chart-fill" class="text-yellow-500" style="width: 36px; height: 36px" />
            </div>
        </div>

        <!-- Data Table -->
        <div class="card rounded-3xl">
            <Toolbar class="mb-6">
                <template #start> </template>

                <template #end>
                    <Button severity="secondary" class="mr-2" @click="ExportPDFResult" rounded raised> <Icon icon="lets-icons:export" />โหลดไฟล์เป็น pdf</Button>
                </template>
            </Toolbar>

            <DataTable :value="summaryByDegree" scrollable scrollHeight="500px" class="text-sm" :filters="filters" :loading="loading" filterDisplay="menu">
                <Column field="degree" header="ชื่อปริญญา" style="min-width: 150px" class="text-lg"></Column>
                <Column field="total" header="จำนวนทั้งหมด" style="min-width: 100px" class="text-lg">
                    <template #body="{ data }">
                        <Tag :value="data.total" severity="info" class="px-3 py-1 text-5xl font-bold">
                            <span class="text-lg font-bold">{{ data.total }}</span>
                        </Tag>
                    </template>
                </Column>
                <Column field="reported" header="รายงานตัวแล้ว" style="min-width: 100px" class="text-lg text-green-700" :body="reportedTemplate">
                    <template #body="{ data }">
                        <Tag :value="data.reported" severity="success" class="px-3 py-1 text-5xl font-bold">
                            <span class="text-lg font-bold">{{ data.reported }}</span>
                        </Tag>
                    </template>
                </Column>
                <Column field="absent" header="ขาด" style="min-width: 100px" class="text-lg text-red-500" :body="absentTemplate">
                    <template #body="{ data }">
                        <Tag :value="data.absent" severity="danger" class="px-3 py-1 text-5xl font-bold">
                            <span class="text-lg font-bold">{{ data.absent }}</span>
                        </Tag>
                    </template>
                </Column>
                <Column field="percentage" header="เปอร์เซ็นต์" :showFilterMatchModes="false" :filterField="'percentage'" style="min-width: 200px" class="text-lg">
                    <template #body="{ data }">
                        <div class="relative w-full">
                            <div class="h-6 bg-gray-200 rounded-full">
                                <div class="h-6 bg-green-500 rounded-full" :style="{ width: data.percentage + '%' }"></div>
                            </div>
                            <div class="absolute left-0 flex items-center justify-center w-full h-4 text-lg font-semibold text-black top-1">{{ data.percentage }}%</div>
                        </div>
                    </template>

                    <template #filter="{ filterModel }">
                        <Slider v-model="filterModel.value" range class="m-4"></Slider>
                        <div class="flex items-center justify-between px-2">
                            <span>{{ filterModel.value ? filterModel.value[0] : 0 }}%</span>
                            <span>{{ filterModel.value ? filterModel.value[1] : 100 }}%</span>
                        </div>
                    </template>
                </Column>
            </DataTable>
        </div>
    </div>
</template>

<style scoped>
table {
    font-family: 'Arial', sans-serif;
}
th,
td {
    text-align: center;
}
</style>

-- หน้า ListDoc.vue --
<script setup>
import { ref, computed, onMounted, onBeforeUnmount } from 'vue';
import axios from 'axios';
import { Icon } from '@iconify/vue';
import Dialog from 'primevue/dialog';
import Paginator from 'primevue/paginator';

const API_BASE = import.meta.env.VITE_API_BASE;

// สร้างตัวแปรต่างๆ
const persons = ref([]);
const loading = ref(false);
const searchQuery = ref('');
const dialogVisible = ref(false);
const selectedPerson = ref({});

const currentPage = ref(0);
const rowsPerPage = ref(180);

// ดึงข้อมูลจาก API
async function fetchPersons() {
    loading.value = true;
    try {
        const response = await axios.get(`${API_BASE}/api/person/`);
        persons.value = response.data
            .filter((p) => p.verified === 1) // กรองเฉพาะ verified === 1
            .sort((a, b) => new Date(b.date) - new Date(a.date))
            .map((person) => ({
                ...person,
                formatted_id: person.id.toString().padStart(4, '0')
            }));
    } catch (error) {
        console.error('Error:', error);
    } finally {
        loading.value = false;
    }
}
onMounted(fetchPersons);

// ฟิลเตอร์จาก search
const filteredPersons = computed(() => {
    const query = searchQuery.value.toLowerCase();
    return persons.value.filter((p) => p.name?.toLowerCase().includes(query) || p.nisit?.toLowerCase().includes(query) || p.seat?.toString().includes(query));
});

// Pagination
const paginatedPersons = computed(() => {
    const start = currentPage.value * rowsPerPage.value;
    return filteredPersons.value.slice(start, start + rowsPerPage.value);
});

// เปิด Dialog
function showPersonDetail(person) {
    selectedPerson.value = person;
    dialogVisible.value = true;
}

function onBeforeHide() {
    dialogVisible.value = false;
}

function onDialogShow() {
    setTimeout(() => {
        document.querySelector('.p-dialog')?.classList.add('transition-opacity');
    }, 10);
}

function highlightMatch(text) {
    const query = searchQuery.value.trim();
    if (!query) return text;
    const regex = new RegExp(`(${query})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
}
</script>

<template>
    <div>
        <div class="mb-2 text-lg font-bold">เลขบัณฑิตที่แตะ TAG แล้ว</div>

        <div class="mb-4">
            <input v-model="searchQuery" type="text" placeholder="ค้นหาชื่อ, รหัสนิสิต, หรือเลขที่นั่ง" class="w-full max-w-md p-2 border rounded" />
        </div>

        <!-- Loading -->
        <div v-if="loading" class="my-4 text-center">กำลังโหลดข้อมูล...</div>

        <!-- Grid -->
        <div v-else class="flex flex-wrap gap-2 card">
            <div v-for="(person, index) in paginatedPersons" :key="index" class="flex flex-col items-center justify-center w-24 h-24 text-center">
                <Icon
                    icon="material-symbols:person"
                    class="text-4xl cursor-pointer"
                    :class="{
                        'text-green-500': person.verified === 1
                    }"
                    @click="() => showPersonDetail(person)"
                />
                <div class="mt-2 text-xs" v-html="highlightMatch(person.nisit.toString())"></div>
            </div>
        </div>

        <!-- Pagination -->
        <Paginator class="mt-6" :rows="rowsPerPage" :totalRecords="filteredPersons.length" :first="currentPage * rowsPerPage" @page="(e) => (currentPage = e.page)" />

        <!-- Dialog -->
        <Dialog v-model:visible="dialogVisible" header="รายละเอียดผู้เข้าร่วม" modal :closable="true" :style="{ width: '300px', maxWidth: '90vw' }" @before-hide="onBeforeHide" @show="onDialogShow">
            <div>
                <p><strong>ชื่อ:</strong> {{ selectedPerson.name }}</p>
                <p><strong>รหัสนิสิต:</strong> {{ selectedPerson.nisit }}</p>
                <p><strong>คณะ:</strong> {{ selectedPerson.degree }}</p>
                <p><strong>ที่นั่ง:</strong> {{ selectedPerson.seat }}</p>
                <p><strong>เวลา:</strong> {{ new Date(selectedPerson.date).toLocaleString() }}</p>
            </div>
        </Dialog>
    </div>
</template>

<style scoped>
.p-dialog {
    transition: opacity 0.3s ease, transform 0.3s ease;
}
.p-dialog-enter-active,
.p-dialog-leave-active {
    transition: opacity 0.3s ease, transform 0.3s ease;
}
.p-dialog-enter,
.p-dialog-leave-to {
    opacity: 0;
    transform: translateY(-50px);
}
.p-dialog .p-dialog-content {
    padding: 20px;
}
.p-dialog-header {
    background-color: #4caf50;
    color: white;
    text-align: center;
}
.p-dialog {
    border-radius: 8px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}
.p-dialog .p-dialog-header-close {
    color: white;
    font-size: 18px;
}
</style>

-- หน้า Logs --
<!-- Logs.vue -->
<script setup>
import { ref, onMounted, onUnmounted } from 'vue';
import axios from 'axios';
import { Icon } from '@iconify/vue';
import { useToast } from 'primevue/usetoast';

const API_BASE = import.meta.env.VITE_API_BASE;

const toast = useToast();
const logs = ref([]);
let refreshInterval = null;

// รีเซ็ตข้อมูล
const confirmResetDialog1 = ref(false);
const confirmResetDialog2 = ref(false);
const resetKeyword = ref('');

const confirmResetdatabase = () => {
    confirmResetDialog1.value = true;
};

const handleResetStep1 = () => {
    confirmResetDialog1.value = false;
    confirmResetDialog2.value = true;
};

const handleResetStep2 = async () => {
    if (resetKeyword.value.toUpperCase() !== 'RESET') {
        toast.add({
            severity: 'error',
            summary: 'ยืนยันไม่สำเร็จ',
            detail: 'กรุณาพิมพ์คำว่า "RESET" ให้ถูกต้อง',
            life: 3000
        });
        resetKeyword.value = '';
        return;
    }
    try {
        await axios.post(`${API_BASE}/api/resetlog/`);
        await fetchLogs();
        toast.add({
            severity: 'success',
            summary: 'รีเซ็ตสำเร็จ',
            detail: 'ลบข้อมูลทั้งหมดเรียบร้อย',
            life: 5000
        });
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'รีเซ็ตล้มเหลว',
            detail: error.response?.data?.error || 'เกิดข้อผิดพลาด',
            life: 5000
        });
    } finally {
        confirmResetDialog2.value = false;
        resetKeyword.value = '';
    }
};

// ฟังก์ชันแปลงรายละเอียด Log
const parsedDetails = (details) => {
    const labels = {
        name: 'ชื่อ',
        nisit: 'รหัสนิสิต',
        degree: 'ปริญญา',
        seat: 'ที่นั่ง',
        verified: 'สถานะ',
        rfid: 'RFID'
    };

    return details.split('|').map((part) => {
        const [field, old, newVal] = part.split('::');

        // แปลงค่า verified เป็นตัวเลข
        const processValue = (value, field) => {
            if (field === 'verified') {
                const statusMap = {
                    ยังไม่รายงานตัว: 0,
                    รายงานตัวแล้ว: 1,
                    อยู่ในห้องพิธี: 2
                };
                return statusMap[value] ?? value;
            }
            return value;
        };

        return {
            field,
            label: labels[field] || field,
            old: processValue(old, field),
            new: processValue(newVal, field)
        };
    });
};

// ฟังก์ชันจัดการไอคอน verified
const getVerifiedIcon = (value) => {
    const icons = {
        0: 'rivet-icons:close-circle-solid',
        1: 'rivet-icons:check-circle-solid',
        2: 'rivet-icons:exclamation-mark-circle-solid'
    };
    const status = Number(value);
    return icons[status] || 'rivet-icons:check-circle-solid';
};

// ฟังก์ชันจัดการสี verified
const getVerifiedColor = (value) => {
    // ตรวจสอบชนิดข้อมูลของ value
    const status = Number(value);
    if (status === 1) return 'text-green-500';
    if (status === 0) return 'text-red-500';
    if (status === 2) return 'text-yellow-500'; // เปลี่ยนจาก yellow-300 เป็น yellow-500
    return 'text-gray-400';
};

const fetchLogs = async () => {
    try {
        let allLogs = [];
        let nextUrl = `${API_BASE}/api/logs/`;

        while (nextUrl) {
            const response = await axios.get(nextUrl);
            const data = response.data;

            // ตรวจสอบโครงสร้างข้อมูล
            const pageLogs = data.results || data;

            // กรอง null และเพิ่มข้อมูล
            allLogs.push(...pageLogs.filter((log) => log !== null));

            // อัปเดต URL ถัดไป (ใช้ API_BASE เสมอ)
            nextUrl = data.next ? data.next.replace(/^http:\/\/(localhost|127\.0\.0\.1):8000\/api/, API_BASE) : null;
        }

        logs.value = allLogs;
    } catch (error) {
        console.error('Error fetching logs:', error);
        toast.add({
            severity: 'error',
            summary: 'เกิดข้อผิดพลาด',
            detail: 'ดึงข้อมูลไม่สำเร็จ',
            life: 3000
        });
    }
};

onMounted(() => {
    fetchLogs();
});
</script>

<template>
    <div class="flex flex-col h-full card">
        <Toolbar class="mb-6">
            <template #start>
                <Button severity="secondary" class="mr-2" @click="confirmResetdatabase" rounded raised>
                    <Icon icon="lucide:database-backup" />
                    <span>รีเซ็ตประวัติ</span>
                </Button>
            </template>
        </Toolbar>
        <DataTable
            :value="logs"
            :paginator="true"
            :rows="10"
            :filters="filters"
            paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
            :rowsPerPageOptions="[5, 10, 25]"
            currentPageReportTemplate="จาก   {first} ถึง {last} ของทั้งหมด {totalRecords} คน"
            scrollable
            scrollHeight="flex"
            class="h-full"
            :pt="{
                root: { class: 'flex-1 flex flex-col' },
                loadingOverlay: { class: 'flex-1' },
                wrapper: { class: 'flex-1 flex flex-col' },
                table: { class: 'min-w-[800px]' }
            }"
        >
            <!-- คอลัมน์รายการ -->
            <Column field="id" header="รายการ" style="min-width: 50px">
                <template #body="{ data }">
                    <span v-if="data?.id" class="font-semibold">
                        {{ data.id }}
                    </span>
                </template>
            </Column>

            <!-- คอลัมน์วันที่ -->
            <Column field="timestamp" header="วันที่" style="min-width: 100px">
                <template #body="{ data }">
                    <template v-if="data?.timestamp">
                        {{
                            new Date(data.timestamp).toLocaleDateString('th-TH', {
                                year: 'numeric',
                                month: '2-digit',
                                day: '2-digit'
                            })
                        }}
                    </template>
                    <span v-else class="text-gray-400">N/A</span>
                </template>
            </Column>

            <!-- คอลัมน์เวลา -->
            <Column field="timestamp" header="เวลา" style="min-width: 100px">
                <template #body="{ data }">
                    <template v-if="data?.timestamp">
                        {{
                            new Date(data.timestamp).toLocaleTimeString('th-TH', {
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                            })
                        }}
                    </template>
                    <span v-else class="text-gray-400">N/A</span>
                </template>
            </Column>

            <!-- คอลัมน์การกระทำ -->
            <Column field="action" header="การกระทำ" style="min-width: 100px">
                <template #body="{ data }">
                    <Tag
                        v-if="data?.action"
                        :value="data.action"
                        :severity="
                            {
                                Add: 'success',
                                Edit: 'info',
                                Delete: 'danger',
                                Import: 'warning',
                                Export: 'help',
                                Reset: 'danger'
                            }[data.action]
                        "
                    />
                </template>
            </Column>

            <Column field="" header="ผู้ใช้" style="min-width: 100px"></Column>

            <!-- คอลัมน์รายละเอียด -->
            <Column field="details" header="รายละเอียด" style="min-width: 500px">
                <template #body="{ data }">
                    <div v-if="data?.details" class="flex flex-wrap items-center gap-2">
                        <!-- แสดง ID -->
                        <span v-if="data.record_id" class="font-semibold text-blue-600">[ID: {{ data.record_id }}]</span>

                        <!-- แสดงการเปลี่ยนแปลงทั้งหมดในบรรทัดเดียว -->
                        <template v-for="(item, index) in parsedDetails(data.details)" :key="index">
                            <div class="flex items-center gap-1">
                                <!-- กรณีแก้ไข verified -->
                                <template v-if="item.field === 'verified'">
                                    <span class="shrink-0">{{ item.label }}:</span>
                                    <span :class="getVerifiedColor(item.old)">
                                        <Icon :icon="getVerifiedIcon(item.old)" />
                                    </span>
                                    <Icon v-if="item.new !== null && item.new !== undefined" icon="mdi:arrow-right" class="mx-1 text-gray-500" />
                                    <span v-if="item.new !== null && item.new !== undefined" :class="getVerifiedColor(item.new)">
                                        <Icon :icon="getVerifiedIcon(item.new)" />
                                    </span>
                                </template>
                                <!-- กรณีแก้ไขฟิลด์อื่น -->
                                <template v-else>
                                    <span class="font-medium">{{ item.label }}:</span>
                                    <span class="text-red-500 line-through">{{ item.old }}</span>
                                    <Icon v-if="item.new !== undefined" icon="mdi:arrow-right" class="mx-1 text-gray-500" />
                                    <span v-if="item.new !== undefined" class="text-green-500">{{ item.new }}</span>
                                </template>
                            </div>
                            <!-- เพิ่มเส้นคั่น -->
                            <span v-if="index < parsedDetails(data.details).length - 1 && item.new !== undefined">|</span>
                        </template>
                    </div>
                </template>
            </Column>

            <template #empty>
                <div class="py-6 text-center text-gray-400">ไม่พบข้อมูล Logs</div>
            </template>
        </DataTable>

        <!-- Dialog ยืนยันขั้นที่ 1 -->
        <Dialog v-model:visible="confirmResetDialog1" header="ยืนยันการรีเซ็ต" :modal="true" :style="{ width: '500px' }">
            <div class="flex items-center gap-4 p-4">
                <Icon icon="bi:exclamation-triangle-fill" class="text-yellow-300" />
                <div>
                    <h3 class="mb-2 text-lg font-bold">คุณแน่ใจที่จะรีเซ็ตประวัติทั้งหมด?</h3>
                    <p class="text-black">การกระทำนี้จะลบข้อมูลทุกรายการและไม่สามารถกู้คืนได้</p>
                </div>
            </div>
            <template #footer>
                <Button label="ยกเลิก" icon="pi pi-times" @click="confirmResetDialog1 = false" severity="secondary" text />
                <Button label="ดำเนินการต่อ" icon="pi pi-arrow-right" @click="handleResetStep1" severity="danger" />
            </template>
        </Dialog>

        <!-- Dialog ยืนยันขั้นที่ 2 -->
        <Dialog v-model:visible="confirmResetDialog2" header="ยืนยันขั้นสุดท้าย" :modal="true" :style="{ width: '500px' }">
            <div class="flex flex-col gap-4 p-4">
                <div class="flex items-center gap-4">
                    <Icon icon="teenyicons:shield-solid" class="text-3xl text-red-500" />
                    <h3 class="text-lg font-bold">กรุณาพิมพ์คำว่า "RESET"</h3>
                </div>

                <InputText v-model="resetKeyword" placeholder="พิมพ์คำว่า RESET ที่นี่" class="w-full" autocomplete="off" @keyup.enter="handleResetStep2" />
            </div>
            <template #footer>
                <Button label="ยกเลิก" icon="pi pi-times" @click="confirmResetDialog2 = false" severity="secondary" text />
                <Button label="ยืนยันรีเซ็ต" icon="pi pi-check" @click="handleResetStep2" :disabled="resetKeyword.toUpperCase() !== 'RESET'" severity="danger" />
            </template>
        </Dialog>
    </div>
</template>

<style scoped>  
</style>

-- หน้า Seat.vue --
<script setup>
import { ref, computed, onMounted, watch } from 'vue';
import axios from 'axios';
import { Icon } from '@iconify/vue';
import Dialog from 'primevue/dialog';
import Toast from 'primevue/toast';
import Skeleton from 'primevue/skeleton';
import Badge from 'primevue/badge';
import { useToast } from 'primevue/usetoast';

const API_BASE = import.meta.env.VITE_API_BASE;

const TOTAL_SEATS = 7000;
const COLS = 60;
const ROWS_COUNT = Math.ceil(TOTAL_SEATS / COLS);

const persons = ref([]);
const loading = ref(false);
const searchQuery = ref('');
const verifiedFilter = ref('all');
const showFilters = ref(false);
const dialogVisible = ref(false);
const selectedPerson = ref({});
const toast = useToast();

async function fetchPersons() {
    loading.value = true;
    try {
        const { data } = await axios.get(`${API_BASE}/api/person/`);
        persons.value = data.map((p) => ({ ...p, seat: Number(p.seat) })).filter((p) => p.seat >= 1 && p.seat <= TOTAL_SEATS);
    } catch (e) {
        console.error(e);
    } finally {
        loading.value = false;
    }
}

const filteredPersons = computed(() => {
    let r = [...persons.value];
    if (verifiedFilter.value === 'verified') r = r.filter((p) => p.verified === 1);
    else if (verifiedFilter.value === 'unverified') r = r.filter((p) => p.verified === 0);
    else if (verifiedFilter.value === 'unknown') r = r.filter((p) => p.verified !== 0 && p.verified !== 1);

    if (searchQuery.value) {
        const q = searchQuery.value.toLowerCase();
        r = r.filter((p) => p.name?.toLowerCase().includes(q) || p.nisit?.includes(q) || p.degree?.toLowerCase().includes(q) || p.seat.toString().includes(q));
        clearTimeout(window._toastTimer);
        window._toastTimer = setTimeout(() => {
            toast.add({ severity: 'info', summary: 'ผลการค้นหา', detail: `พบ ${r.length} รายการ`, life: 2000 });
        }, 300);
    }
    return r;
});

watch(filteredPersons, () => {});

const seatsGrid = computed(() => {
    const rows = Array.from({ length: ROWS_COUNT }, () => Array.from({ length: COLS }, () => null));

    filteredPersons.value.forEach((p) => {
        let seat = p.seat;
        let ri, ci;

        if (seat >= 1777) {
            // แถวที่ 31 เริ่มจาก seat 1777
            const offset = seat - 1777;
            ri = 30 + Math.floor(offset / COLS); // แถว index 30 คือแถวที่ 31
            ci = offset % COLS;
        } else if (seat >= 1006) {
            // แถวที่ 18 เริ่มจาก seat 1006
            const offset = seat - 1006;
            ri = 17 + Math.floor(offset / COLS); // แถว index 17 คือแถวที่ 18
            ci = offset % COLS;
        } else if (seat >= 235) {
            // แถวที่ 5 เริ่มจาก seat 235
            const offset = seat - 235;
            ri = 4 + Math.floor(offset / COLS); // แถว index 4 คือแถวที่ 5
            ci = offset % COLS;
        } else {
            // ก่อนหน้า seat 235
            const idx = seat - 1;
            ri = Math.floor(idx / COLS);
            ci = idx % COLS;
        }

        if (rows[ri] && !rows[ri][ci]) {
            rows[ri][ci] = p;
        }
    });

    return rows;
});

function showPersonDetail(person) {
    selectedPerson.value = person;
    dialogVisible.value = true;
}

function buttonClass(status) {
    return ['px-3 py-1 rounded-full text-sm font-semibold transition', verifiedFilter.value === status ? 'bg-blue-600 text-white shadow' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'].join(' ');
}

onMounted(fetchPersons);
</script>

<template>
    <div>
        <Toast />
        <!-- Search Bar -->
        <div class="relative my-4 sticky-top">
            <Icon icon="material-symbols:search" class="absolute text-2xl text-blue-500 -translate-y-1/2 left-4 top-1/2" />
            <input v-model="searchQuery" type="text" placeholder="ค้นหา (ชื่อ, ID, รหัสนิสิต, ที่นั่ง...)" class="w-full h-12 pl-12 pr-4 border border-blue-500 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
        </div>

        <!-- Filter Speed Dial -->
        <div class="fixed z-50 flex flex-col items-end space-y-3 bottom-6 right-6">
            <transition-group name="fade" tag="div" v-if="showFilters">
                <button key="all" @click="verifiedFilter = 'all'" :class="buttonClass('all')"><Badge value="📋" severity="info" class="mr-1" /> ทั้งหมด</button>
                <button key="verified" @click="verifiedFilter = 'verified'" :class="buttonClass('verified')"><Badge value="✅" /> รายงานตัว</button>
                <button key="unverified" @click="verifiedFilter = 'unverified'" :class="buttonClass('unverified')"><Badge value="❌" /> ยังไม่รายงาน</button>
                <button key="unknown" @click="verifiedFilter = 'unknown'" :class="buttonClass('unknown')"><Badge value="❓" severity="warning" /> ไม่ทราบสถานะ</button>
            </transition-group>
            <button @click="showFilters = !showFilters" class="p-4 text-white transition-transform rounded-full shadow-lg bg-gradient-to-br from-blue-500 to-indigo-600 hover:scale-105">
                <Icon icon="material-symbols:filter-list" class="text-2xl" />
            </button>
        </div>

        <!-- Seat Grid -->
        <div v-if="loading" class="grid grid-cols-5 gap-4 p-4"><Skeleton v-for="n in 10" :key="n" width="100%" height="4rem" /></div>
        <div v-else class="relative max-w-full p-4 overflow-auto rounded-lg shadow-inner bg-gradient-to-br from-blue-900 to-blue-800">
            <div v-for="(row, rowIndex) in seatsGrid" :key="rowIndex" class="relative h-16 mb-2">
                <!-- Label -->
                <div class="absolute left-0 flex items-center justify-between w-16 px-3 py-2 text-xs font-bold text-white -translate-y-1/2 bg-purple-600 shadow rounded-xl top-1/2">
                    <span>แถว</span><span>{{ rowIndex + 1 }}</span>
                </div>
                <div class="flex items-center h-full ml-16">
                    <template v-if="rowIndex === 3 || rowIndex === 16 || rowIndex === 29">
                        <!-- 👇 rowIndex 3: เสา 2 ต้น แบบเดิม -->
                        <template v-if="rowIndex === 3">
                            <!-- seats 181–186 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(0, 6)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- เสา 1 -->
                            <div class="flex-none flex items-center justify-center w-[7.75rem] h-full border-2 border-yellow-400 rounded-lg bg-yellow-100 shadow">
                                <span class="text-xs font-bold text-yellow-800">เสา</span>
                            </div>

                            <!-- seats 187–210 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(6, 30)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- spacer -->
                            <div class="flex-none w-16"></div>

                            <!-- seats 211–226 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(30, 46)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- เสา 2 -->
                            <div class="flex-none flex items-center justify-center w-[7.75rem] h-full border-2 border-yellow-400 rounded-lg bg-yellow-100 shadow">
                                <span class="text-xs font-bold text-yellow-800">เสา</span>
                            </div>

                            <!-- seats 227–234 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(46, 54)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>
                        </template>

                        <!-- 👇 rowIndex 16: เสา 3 ต้น -->
                        <template v-else-if="rowIndex === 29">
                            <!-- seats 961–981 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(0, 6)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- เสา 1 -->
                            <div class="flex-none flex items-center justify-center w-[7.75rem] h-full border-2 border-yellow-400 rounded-lg bg-yellow-100 shadow">
                                <span class="text-xs font-bold text-yellow-800">เสา</span>
                            </div>

                            <!-- seats 982–1001 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(6, 27)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- เสา 2 -->
                            <div class="flex-none flex items-center justify-center w-[7.45rem] h-full border-2 border-yellow-400 rounded-lg bg-yellow-100 shadow">
                                <span class="text-xs font-bold text-yellow-800">เสา</span>
                            </div>

                            <!-- spacer -->
                            <div class="flex-none w-16"></div>

                            <!-- seats 1002–1016 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(27, 43)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- เสา 3 -->
                            <div class="flex-none flex items-center justify-center w-[7.75rem] h-full border-2 border-yellow-400 rounded-lg bg-yellow-100 shadow">
                                <span class="text-xs font-bold text-yellow-800">เสา</span>
                            </div>

                            <!-- seats 1017–1020 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(43, 51)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>
                        </template>

                        <!-- 👇 rowIndex 16: เสา 3 ต้น -->
                        <template v-else-if="rowIndex === 16">
                            <!-- seats 961–981 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(0, 6)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- เสา 1 -->
                            <div class="flex-none flex items-center justify-center w-[7.75rem] h-full border-2 border-yellow-400 rounded-lg bg-yellow-100 shadow">
                                <span class="text-xs font-bold text-yellow-800">เสา</span>
                            </div>

                            <!-- seats 982–1001 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(6, 27)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- เสา 2 -->
                            <div class="flex-none flex items-center justify-center w-[7.45rem] h-full border-2 border-yellow-400 rounded-lg bg-yellow-100 shadow">
                                <span class="text-xs font-bold text-yellow-800">เสา</span>
                            </div>

                            <!-- spacer -->
                            <div class="flex-none w-16"></div>

                            <!-- seats 1002–1016 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(27, 43)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>

                            <!-- เสา 3 -->
                            <div class="flex-none flex items-center justify-center w-[7.75rem] h-full border-2 border-yellow-400 rounded-lg bg-yellow-100 shadow">
                                <span class="text-xs font-bold text-yellow-800">เสา</span>
                            </div>

                            <!-- seats 1017–1020 -->
                            <div class="flex space-x-1">
                                <div v-for="(p, i) in row.slice(43, 51)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                    <Icon
                                        v-if="p"
                                        icon="material-symbols:event-seat"
                                        class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                        :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                        v-tooltip="p.name"
                                        @click="showPersonDetail(p)"
                                    />
                                    <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                    <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                                </div>
                            </div>
                        </template>
                    </template>

                    <!-- แถวอื่นๆ -->
                    <template v-else>
                        <div class="flex space-x-1">
                            <div v-for="(p, i) in row.slice(0, 33)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                <Icon
                                    v-if="p"
                                    icon="material-symbols:event-seat"
                                    class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                    :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                    v-tooltip="p.name"
                                    @click="showPersonDetail(p)"
                                />
                                <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                            </div>
                        </div>
                        <div class="flex-none w-16"></div>
                        <div class="flex space-x-1">
                            <div v-for="(p, i) in row.slice(33)" :key="i" class="flex flex-col items-center justify-center h-full w-9">
                                <Icon
                                    v-if="p"
                                    icon="material-symbols:event-seat"
                                    class="text-2xl rounded shadow cursor-pointer hover:scale-110 hover:shadow-lg"
                                    :class="p.verified === 1 ? 'text-green-500' : p.verified === 0 ? 'text-red-500' : 'text-gray-400'"
                                    v-tooltip="p.name"
                                    @click="showPersonDetail(p)"
                                />
                                <div v-else class="w-6 h-6 text-xs text-gray-400">–</div>
                                <div v-if="p" class="text-[10px] mt-1" v-tooltip="'ที่นั่ง ' + p.seat">{{ p.seat }}</div>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        </div>
        <!-- Detail Dialog -->
        <Dialog v-model:visible="dialogVisible" header="รายละเอียดผู้เข้าร่วม" modal :closable="true" class="p-fluid">
            <div class="space-y-4">
                <div class="grid grid-cols-3 gap-2 pt-3 border-t">
                    <label class="font-semibold text-white-600">ชื่อ</label>
                    <p class="col-span-2 text-white-800">{{ selectedPerson.name }}</p>
                </div>
                <div class="grid grid-cols-3 gap-2 pt-3 border-t">
                    <label class="font-semibold text-white-600">รหัสนิสิต</label>
                    <p class="col-span-2 text-white-800">{{ selectedPerson.nisit }}</p>
                </div>
                <div class="grid grid-cols-3 gap-2 pt-3 border-t">
                    <label class="font-semibold text-white-600">คณะ</label>
                    <p class="col-span-2 text-white-800">{{ selectedPerson.degree }}</p>
                </div>
                <div class="grid grid-cols-3 gap-2 pt-3 border-t">
                    <label class="font-semibold text-white-600">ที่นั่ง</label>
                    <p class="col-span-2 text-white-800">{{ selectedPerson.seat }}</p>
                </div>
            </div>
        </Dialog>
    </div>
</template>

<style scoped>
.p-dialog {
    transition: opacity 0.3s ease, transform 0.3s ease;
}
.fade-enter-active,
.fade-leave-active {
    transition: all 0.2s ease;
}
.fade-enter-from,
.fade-leave-to {
    opacity: 0;
    transform: translateY(5px);
}
</style>